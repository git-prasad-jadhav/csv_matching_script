import os
import pandas as pd


def scan_and_match_csv(
    folder_path,
    master_file_name,
    output_file_path,
    match_columns_master
):
    """
    Scan a folder and its subfolders for CSV files (excluding the master file), 
    match records based on values in specified columns, and output matching records to a CSV file.

    :param folder_path: Path to the folder containing the files.
    :param master_file_name: Name of the master CSV file.
    :param output_file_path: Path to save the output file with matching records.
    :param match_columns_master: List of column names from the master file to check for matching.
    """
    master_file_path = os.path.join(folder_path, master_file_name)

    # Read the master file
    try:
        master_df = pd.read_csv(master_file_path)
    except Exception as e:
        print(f"Error reading master file '{master_file_name}': {e}")
        return

    # Validate the match columns in the master file
    for col in match_columns_master:
        if col not in master_df.columns:
            print(f"Error: Column '{col}' not found in the master file.")
            return

    # Prepare a DataFrame to collect results
    result_df = master_df.copy()
    result_df['SourceFile'] = ''
    result_df['MatchedColumn'] = ''
    result_df['MatchedValue'] = ''

    # Extract unique values for each column in match_columns_master
    master_values_dict = {col: master_df[col].dropna().unique() for col in match_columns_master}

    # Traverse the folder and its subfolders for CSV files
    for root, _, files in os.walk(folder_path):
        for file_name in files:
            if file_name.endswith('.csv') and file_name != master_file_name:
                file_path = os.path.join(root, file_name)

                # Try different delimiters to read the CSV file
                df = None
                for delimiter in [',', ';', '\t', '|']:
                    try:
                        df = pd.read_csv(file_path, delimiter=delimiter)
                        break
                    except Exception:
                        continue

                # If the file could not be read, skip to the next file
                if df is None:
                    print(f"Skipping file '{file_name}': Unable to read with any delimiter.")
                    continue

                # Check for matches in each column
                for col_master, master_values in master_values_dict.items():
                    for col_other in df.columns:
                        matching_rows = df[df[col_other].isin(master_values)]
                        if not matching_rows.empty:
                            # Update the master DataFrame with matching details
                            matched_values = matching_rows[col_other].unique()
                            mask = result_df[col_master].isin(matched_values)
                            result_df.loc[mask, 'SourceFile'] = file_path
                            result_df.loc[mask, 'MatchedColumn'] = col_other
                            result_df.loc[mask, 'MatchedValue'] = result_df.loc[mask, col_master]

    # Save the result DataFrame to the output file
    result_df.to_csv(output_file_path, index=False)
    print(f"Matching records have been saved to '{output_file_path}'.")


# Define the folder path, master file name, and output file path
folder_path = 'C:/PythonProjects'
master_file_name = 'Master.csv'
output_file_path = 'C:/PythonProjects/MatchingRecords.csv'

# Specify the columns in the master file for matching
match_columns_master = ['AppId', 'ID']

# Call the function to scan the folder and its subfolders, and output matching records
scan_and_match_csv(folder_path, master_file_name, output_file_path, match_columns_master)
